\documentclass[a4paper]{article}
\usepackage{Rd}
\usepackage{amsmath}
\usepackage[round]{natbib}
\usepackage{bm}
\usepackage{verbatim}
\usepackage[latin1]{inputenc}
\bibliographystyle{abbrvnat}
\usepackage{url}

\let\proglang=\textsf
\renewcommand{\topfraction}{0.85}
\renewcommand{\textfraction}{0.1}
\renewcommand{\baselinestretch}{1.5}
\setlength{\textwidth}{15cm} \setlength{\textheight}{22cm} \topmargin-1cm \evensidemargin0.5cm \oddsidemargin0.5cm

\usepackage{lmodern}
\usepackage[T1]{fontenc}

% \VignetteIndexEntry{Fitting a fundamental factor model with 'fitFfm' in factorAnalytics}
%\VignetteEngine{knitr::knitr}

\begin{document}

<<include=FALSE>>=
library(knitr)
opts_chunk$set(concordance=TRUE)
@

\title{Fitting Fundamental Factor Models: factorAnalytics vignette}
\author{Sangeetha Srinivasan}
\maketitle

\begin{abstract}
The purpose of this vignette is to demonstrate the use of \code{fitFfm} and related control, analysis and plot functions in the \code{factorAnalytics} package.
\end{abstract}

\tableofcontents
\bigskip

\newpage
\section{Overview}

\subsection{Load Package}

The latest version of the \verb"factorAnalytics" package used in this vignette is hosted in the publicly available GitHub repository https://github.com/sangeeuw/factorAnalytics. Note that there are plans for further updates to the package before its moved back to R-Forge and gets a CRAN release later this year.

The package can be installed from GitHub using \verb"devtools" as follows.
<<eval=FALSE>>=
library(devtools)
install_github("sangeeuw/factorAnalytics")
@

<<message=FALSE, warning=FALSE>>=
# load the package and its dependencies
library(factorAnalytics)
options(digits=3)
@

The focus of this vignette is on the \code{fitFfm} function and related methods. The original function was designed by Doug Martin and initially implemented in S-PLUS by a number of University of Washington Ph.D. students: Christopher Green, Eric Aldrich, and Yindeng Jiang. Guy Yollin ported the function to R and Yi-An Chen modified that code. Sangeetha Srinivasan tested and expanded the functionalities and S3 methods. Doug Martin, Avinash Acharya, Lingjie Yi and Chindhanai Uthaisaad further added options to model EWMA and GARCH errors, allow for a market + industry and/or sector and/or country model specification, etc. Refer to the previous Fundamental factor model vignette for more examples elaborating on these recent functionalities and reporting functions.

\subsection{Summary of related functions}
Here's a list of the functions and methods demonstrated in this vignette:

\begin{itemize}

\item \verb"fitFfm(data, asset.var, ret.var, date.var, exposure.vars, weight.var, " \\ \verb"fit.method, rob.stats, full.resid.cov, z.score, add.intercept, lag.exposures, " \\ \verb"resid.scale.type, lambda, GARCH.params, GARCH.MLE, std.return, analysis, " \\ \verb"target.vol, ...)": Fits a fundamental factor model for one or more asset returns or excess returns using $T$ cross-sectional regressions a.k.a. the "BARRA" approach (detailed in \citet{grinold2000active}), where $T$ is the number of time periods. Least squares (LS), weighted least squares (WLS), robust (rob) and weighted-robust regression (W-Rob) fitting are possible. Options for computing residual variances include sample variance, EWMA, Robust EWMA and GARCH(1,1). An object of class "ffm" containing the fitted objects, factor exposures, factor returns, R-squared, residual volatility, etc. is returned.

\item \verb"coef(object, ...)": Returns a data.frame containing the coefficients (intercept and factor exposures) for the last time period for all assets.

\item \verb"fitted(object, ...)": Returns an "xts" data object of fitted asset returns from the factor model for all assets.

\item \verb"residuals(object, ...)": Returns an "xts" data object of residuals from the fitted factor model for all assets.

\item \verb"fmCov(object, use, ...)": Returns the \code{N x N} symmetric covariance matrix for asset returns based on the fitted factor model using exposures from the last time period.

\item \verb"fmSdDecomp(object, use, ...)": Returns a list containing the standard deviation of asset returns based on the fitted factor model and the marginal, component and percentage component factor contributions estimated from the given sample. \code{"use"} specifies how missing values are to be handled.

\item \verb"fmVaRDecomp(object, p, ...)": Returns a list containing the value-at-risk for asset returns based on the fitted factor model and the marginal, component and percentage component factor contributions estimated from the given sample. VaR computation can be non-parametric (sample quantile) or based on a Normal distribution. And, \code{"p"} specifies the confidence level.

\item \verb"fmEsDecomp(object, p, ...)": Returns a list containing the expected shortfall for asset returns based on the fitted factor model and the marginal, component and percentage component factor contributions estimated from the given sample. Expected shortfall computation can be non-parametric (sample quantile) or based on a Normal distribution.

\item \verb"plot(x)": The \code{plot} method for class "ffm" can be used for plotting factor model characteristics of a group of assets (default) or an individual asset. The user can select the type of plot either from the menu prompt or directly via argument \code{which}. In case multiple plots are needed, the menu is repeated after each plot (enter 0 to exit). User can also input a numeric vector of plot options via \code{which}.

\item \verb"predict(object, newdata, pred.date, ...)": The \code{predict} method for class "ffm" returns a vector or matrix of predicted values for a new data sample or simulated values. \code{pred.date} allows user to choose a date, and hence the estimated factor exposures from that date to be used in the prediction.

\item \verb"summary(object, ...)": The \code{summary} method for class "ffm" returns an object of class \code{"summary.ffm"} containing the summaries of the fitted objects. Printing the factor model summary object outputs the call, estimated factor returns, r-squared and residual volatility for each time period.

\end{itemize}

\subsection{Data}

The following examples primarily use the \code{Stock.df} dataset. It contains fundamental and monthly return data for 447 stocks listed on the NYSE over a 8-year period. The dataset is balanced, i.e., every asset has a complete set of observations for all variables in each time period. Here are some properties of the dataset:
<<>>=
# load the dataset into the environment
data(Stock.df)
# get a list of the variable names
colnames(stock)
# time period covered in the data
range(stock[,"DATE"])
# number of stocks
length(unique(stock[,"TICKER"]))
# count stocks by GICS sector as of the last time period
stocklist<-subset(stock,DATE=="2003-12-31")
table(stocklist$GICS.SECTOR)
@

\newpage
\section{Fit a fundamental factor model}

A fundamental factor model uses observed cross-sectional asset characteristics such as dividend yield, earnings yield, book-to-market ratio, market capitalization, sector or industry classification, price volatility, price momemtum, leverage, etc. to determine common risk factors that contribute to asset returns. There are 2 main approaches to estimating the fundamental factor model - the "BARRA" approach (detailed in \citet{grinold2000active}) and the "Fama-French" approach (introduced in \citet{fama1992cross}). In the "BARRA" approach, the obsered fundamental attributes are the factor betas and the unknown factor returns are estimated via cross-sectional regressions for each time period. In the "Fama-French" approach, the factor returns are the observed returns of a hypothetical hedge portfolio that's long/short the top/bottom quintile of stocks for a given attribute (ex: market cap for the size factor). After the factor returns are computed for each characterictic, each asset's factor exposures are estimated via a time series regression. \code{fitFfm} described in this vignette uses the "BARRA" approach.

Let's take a look at the arguments for \code{fitFfm}.

<<tidy=TRUE>>=
args(fitFfm)
@

The default model fitting method is ordinary least squares (LS) regression, with the option to choose robust regression (Rob), weighted least squares (WLS) or weighted robust regression (W-Rob). The different model fitting options are demonstrated in the following sections. If weighted regression (WLS or W-Rob) is chosen, inverse of the residual variances are used as weights. \code{resid.scale.type} allows the user to choose the method for computing residual variances - sample variance, EWMA, Robust EWMA and GARCH(1,1).

\code{z.score} provides the option to standardize factor exposures cross-sectionally across assets or across time periods. User can also choose to weight the factor exposures by some characteristic (ex: market cap) via \code{weight.var}. \code{add.intercept} gives the option to add an intercept term for fitting a Market + Sector or a Market + Sector + Country model. Note that these models can also include other style factors. \code{lag.exposures} gives the option to use lag the factor exposures by one time period. \code{full.resid.cov} provides the option to choose between a diagonal vs. full residual covariance matrix. And, \code{rob.stats} allows for robust estimates of covariance, correlation, location and univariate scale.

These and other control parameters are demonstrated in the following sections.

\subsection{Single Factor Model}




<<>>=
# Single Factor Model
fit.single <- fitFfm(data=stock, asset.var="TICKER", ret.var="RETURN",
                     date.var="DATE", exposure.vars="BOOK2MARKET")
@

The resulting object, \code{fit.sector}, has the following attributes.
<<>>=
class(fit.single)
names(fit.single)
@

The component \code{factor.fit} contains a list of "lm" or "lmRob" objects\footnotemark[1], one for each time period. The estimated factor returns are in \code{factor.returns} and factor exposures from the last time period are in \code{beta}. R-squared and residual variance are in \code{r2} and \code{resid.var} respectively. The estimated factor, residual and asset return covariance matrices are in \code{factor.cov}, \code{resid.cov} and \code{return.cov} respectively. The remaining components contain the input choices and the data.

\footnotetext[1]{The fitted objects is of class "lm" if \code{fit.method="LS" or "WLS"}, or class "lmRob", if \code{fit.method="Rob" or "W-Rob"}}

<<>>=
# print the fitted "ffm" object
fit.single
@

Figure 1 shows the single factor linear fits for the assets. (Plot options are explained later in section 4.)

<<fig.cap="Single factor model: Asset returns vs Factor Returns">>=
# plot asset returns vs factor returns for the single factor model
# default is to plot the 1st 6 assets
plot(fit.single, which=12, f.sub=1)
@

\subsection{BARRA-type Industry Factor Model}

A BARRA-type industry (sector) factor model is a fundamental factor model with multiple factors. It is implemented here for the 447 NYSE stocks in our chosen dataset, using the 10 mutually exclusive GICS sector classifications as the 10 factors. The factor exposures will be dummy variables that indicate if a given stock belongs to a particular sector or not. Mutually exclusive sectors means that each stock belongs to a unique sector in any given time period.
<<>>=
# Sector Factor Model
fit.sector <- fitFfm(data=stock, asset.var="TICKER", ret.var="RETURN",
                     date.var="DATE", exposure.vars="GICS.SECTOR")
@

Let's take a look at the fitted factor model from the last time period (Dec 2003). Materials, Telecomm and the Energy sector had particularly strong returns, with their estimated factor returns over 10\% for that month. Energy stocks rebounded in 2003 from the beating they took in 2002 following the Enron scandal. Telecomm stocks benefited from the increased spending by companies investing in internet-based phone systems etc.

<<>>=
# print the summary from the last period's fit
num.periods <- length(fit.sector$time.periods)
summary(fit.sector$factor.fit[[num.periods]])
@

Figure 2 shows the distribution of estimated factor returns, sorted by descending order of their mean. We observe that the "Information Technology" sector had the highest average return (not suprising, given this dataset covers a significant part of the dot-com bubble).

<<fig.cap="Sector model: Distribution of Factor Returns">>=
# plot distribution of factor returns by sector sorted by means
plot(fit.sector, which=1, colorset="black", f.sub=1:10, lwd=1,
     sort.by="mean")
@

\newpage
\subsection{Market Timing Models}

In the following example, we fit the \citet{henriksson1981market} market timing model, using the SP500 as the market. Market timing accounts for the price movement of the general stock market relative to fixed income securities. The function \code{fitFfmMT}, a wrapper to \code{fitFfm}, includes $down.market = max(0, R_f-R_m)$ as a factor. To test market timing ability, this factor can be added to the single index model as shown below. The coefficient of this down-market factor can be interpreted as the number of "free" put options on the market provided by the manager's market-timings kills. That is, a negative value for the regression estimate would imply a negative value for market timing ability of the manager.
<<>>=
# Henriksson-Merton's market timing model
fit.mktTiming <-  fitFfmMT(asset.names=asset.names, mkt.name="SP500.TR",
                            rf.name="US.3m.TR", data=managers)
t(fit.mktTiming$beta)
fit.mktTiming$r2
fit.mktTiming$resid.sd
@

% Similarly, to account for market timing with respect to volatility, one can specify \code{mkt.timing="TM"}. Following \citet{treynor1966can}, $market.sqd = (R_m-R_f)^2$ is added as a factor.

Note that, the user needs to specify which of the columns in \code{data} corresponds to the market returns using argument \code{mkt.name}.

\subsection{Fit methods}

The default fit method is LS regression. The next example performs LS regression using all 3 available factors in the dataset. Notice that the R-squared values have improved considerably when compared to the single index model as well as the market-timing model.
<<>>=
fit.ols <- fitFfm(asset.names=asset.names, factor.names=factor.names,
                   rf.name="US.3m.TR", data=managers)
fit.ols$beta
fit.ols$r2
fit.ols$resid.sd
@

Other options include discounted least squares (\code{"DLS"}) and robust regression (\code{"Robust"}). DLS is least squares regression using exponentially discounted weights and accounts for time variation in coefficients. Robust regression is resistant to outliers.
<<>>=
fit.robust <- fitFfm(asset.names=asset.names, factor.names=factor.names,
                      rf.name="US.3m.TR", data=managers, fit.method="Robust")
fit.robust$beta
fit.robust$r2
fit.robust$resid.sd
@

Notice the lower R-squared values and smaller residual volatilities with robust regression. Figures 2 and 3 give a graphical comparison of the fitted returns for asset "HAM3" and residual volatilities from the factor model fits. Figure 2 depicts the smaller influence that the volatility of Jan 2000 has on the robust regression.
<<fig.cap="HAM3 Returns: LS (top) vs Robust (bottom)", fig.show='hold'>>=
par(mfrow=c(2,1))
plot(fit.ols, plot.single=TRUE, which=1, asset.name="HAM3")
mtext("LS", side=3)
plot(fit.robust, plot.single=TRUE, which=1, asset.name="HAM3")
mtext("Robust", side=3)
@

<<fig.cap="Residual Vol: LS (left) vs Robust (right)", fig.width=3, fig.height=2.5, out.width='.49\\linewidth', fig.show='hold'>>=
par(mfrow=c(1,2))
plot(fit.ols, which=5, xlim=c(0,0.045), sub="LS")
plot(fit.robust, which=5, xlim=c(0,0.045), sub="Robust")
@

\subsection{Variable Selection}

Though the R-squared values improved by adding more factors in fit.ols (compared to the single index model), one might prefer to employ variable selection methods such as "stepwise", "subsets" or "lars" to avoid over-fitting. The method can be selected via the \code{variable.selection} argument. The default "none", uses all the factors and performs no variable selection.

Specifying "stepwise" selects traditional stepwise\footnotemark[3] LS or robust regression using \code{step} or \code{step.lmRob} respectively. Starting from the given initial set of factors, factors are added (or subtracted) only if the regression fit, as measured by the Bayesian Information Criterion (BIC) or Akaike Information Criterion (AIC)\footnotemark[4], improves.

Specifying "subsets" enables subsets selection using \code{regsubsets}. The best performing subset of any given size or within a range of subset sizes is chosen. Different methods such as exhaustive search (default), forward or backward stepwise, or sequential replacement can be employed.

Finally, "lars" corresponds to least angle regression using \code{lars} with variants "lasso" (default), "lar", "forward.stagewise" or "stepwise".

\footnotetext[3]{The direction for stepwise search can be one of "forward", "backward" or "both". See the help file for more details.}

\footnotetext[4]{AIC is the default. When the additive constant can be chosen so that AIC is equal to Mallows' Cp, this is done. The optional control parameter \code{k} can be used to switch to BIC instead.}

The next example uses the \code{"lars"} variable selection method. The default type and criterion used are \code{"lasso"} and the \code{"Cp"} statistic.
<<fig.show='hide'>>=
fit.lars <- fitFfm(asset.names=asset.names, factor.names=factor.names,
                    data=managers, rf.name="US.3m.TR",
                    variable.selection="lars")
fit.lars
@

\newpage
Using the same set of factors for comparison, let's fit another model using the \code{"subsets"} variable selection method. Here, the best subset of size 2 for each asset is chosen by specifying $nvmin = nvmax = 2$. Note that when $nvmin < nvmax$, the best subset is chosen from a range of subset sizes $[nvmin, nvmax]$. Default is $nvmin = 1$.
<<>>=
(fit.sub <- fitFfm(asset.names=asset.names, factor.names=factor.names,
                    data=managers, rf.name="US.3m.TR",
                    variable.selection="subsets", nvmin=2, nvmax=2))
@

Comparing the coefficients and R-squared values from the two models, we find that the method that uses more factors for an asset have higher R-squared values as expected. However, when both "lars" and "subsets" chose the same number of factors, "lars" fits have a slightly higher R-squared values.

The Figures 4 and 5 display the factor betas from the two fits.
<<fig.cap="Factor betas: fit.sub", fig.show='hold'>>=
plot(fit.sub, which=2, f.sub=1:3)
@

<<fig.cap="Factor betas: fit.lars", fig.show='hold'>>=
plot(fit.lars, which=2, f.sub=1:3)
@

Remarks:
\begin{itemize}
\item Variable selection methods \code{"stepwise"} and \code{"subsets"} can be combined with any of the fit methods, "LS", "DLS" or "Robust". If variable selection method selected is \code{"lars"}, \code{fit.method} will be ignored.
\item Refer to the next section on \code{fitFfm control} for more details on the control arguments that can be passed to the different variable selection methods.
\end{itemize}

\subsection{S3 generic methods}

<<>>=
methods(class="ffm")
@

Many useful generic accessor functions are available for "ffm" fit objects. \code{coef()} returns a matrix of estimated model coefficients including the intercept. \code{fitted()} returns an xts data object of the component of asset returns explained by the factor model. \code{residuals()} returns an xts data object with the component of asset returns not explained by the factor model.
\code{predict()} uses the fitted factor model to estimate asset returns given a set of new or simulated factor return data.

\code{summary()} prints standard errors and t-statistics for all estimated coefficients in addition to R-squared values and residual volatilities. Argument \code{se.type}, one of "Default", "HC" or "HAC", allows for heteroskedasticity and auto-correlation consistent estimates and standard errors whenever possible. A "summary.ffm" object is returned which contains a list of summary objects returned by "lm", "lm.Rob" or "lars" for each asset fit.

Note: Standard errors are currently not available for the "lars" variable selection method, as there seems to be no consensus on a statistically valid method of calculating standard errors for the lasso predictions.

Factor model covariance and risk decomposition functions are explained in section 3 and the \code{plot} method is discussed separately in Section 4.

Here are some examples using the time series factor models fitted earlier.
<<>>=
# all estimated coefficients from the LS fit using all 3 factors
coef(fit.ols)

# compare returns data with fitted and residual values for HAM1 from fit.lars
HAM1.ts <- merge(fit.lars$data[,1], fitted(fit.lars)[,1], residuals(fit.lars)[,1])
colnames(HAM1.ts) <- c("HAM1.return","HAM1.fitted","HAM1.residual")
tail(HAM1.ts)

# summary for fit.sub computing HAC standard erros
summary(fit.sub, se.type="HAC")
@

\newpage
\section{Factor Model Covariance \& Risk Decomposition}

\subsection{Factor model covariance}

Following \citet{zivot2006modeling}, $R_{i, t}$, the return on asset $i$ ($i = 1, ..., N$) at time $t$ ($t = 1, ..., T$), is fitted with a factor model of the form,
\begin{equation}
R_{i,t} = \alpha_i + \bm\beta_i' \: \mathbf{f_t} + \epsilon_{i,t}
\end{equation}
where, $\alpha_i$ is the intercept, $\mathbf{f_t}$ is a $K \times 1$ vector of factor returns at time $t$, $\bm\beta_i$ is a $K \times 1$ vector of factor exposures for asset $i$ and the error terms $\epsilon_{i,t}$ are serially uncorrelated across time and contemporaneously uncorrelated across assets so that $\epsilon_{i,t} \sim iid(0, \sigma_i^2)$. Thus, the variance of asset $i$'s return is given by
\begin{equation}
var(R_{i,t}) = \bm\beta_i'\: var(\mathbf{f_t})\: \bm\beta_i + \sigma_i^2
\end{equation}

And, the $N \times N$ covariance matrix of asset returns is
\begin{equation}
var(\mathbf{R}) = \bm\Omega = \mathbf{B}\: var(\mathbf{F})\: \mathbf{B}' + \mathbf{D}
\end{equation}
where, $R$ is the $N \times T$ matrix of asset returns, $B$ is the $N \times K$ matrix of factor betas, $\mathbf{F}$ is a $K \times T$ matrix of factor returns and $D$ is a diagonal matrix with $\sigma_i^2$ along the diagonal.

\code{fmCov()} computes the factor model covariance from a fitted factor model. The covariance of factor returns is the sample covariance matrix by default, but the option exists for the user to specify their own. Options for handling missing observations include "pairwise.complete.obs" (default), "everything", "all.obs", "complete.obs" and "na.or.complete".

<<fig.cap="Factor model return correlation (pairwise complete obs)">>=
fmCov(fit.sub)
# factor model return correlation plot
plot(fit.sub, which=8)
@

\subsection{Standard deviation decomposition}

Given the factor model in equation 1, the standard deviation of the asset $i$'s return can be decomposed as follows (based on \citet{meucci2007risk}):
\begin{align}
R_{i,t} &= \alpha_i + \bm\beta_i' \: \mathbf{f_t} + \epsilon_{i,t} \\
&=  \bm\beta_i^{*'} \: \mathbf{f_t^*}
\end{align}
where, $\bm\beta_i^{*'} = (\bm\beta_i' \: \sigma_i)$ and $\mathbf{f_t^{*'}} = (\mathbf{f_t'} \: z_t)$, with $z_t \sim iid(0, 1)$ and $\sigma_i$ is asset $i$'s residual standard deviation.

By Euler's theorem, the standard deviation of asset $i$'s return is:
\begin{align}
Sd.fm_i = \sum_{k=1}^{K+1} cSd_{i,k} = \sum_{k=1}^{K+1} \beta^*_{i,k} \: mSd_{i,k}
\end{align}
where, summation is across the $K$ factors and the residual, $\mathbf{cSd_i}$ and $\mathbf{mSd_i}$ are the component and marginal contributions to $Sd.fm_i$ respectively. Computing $Sd.fm_i$ and $\mathbf{mSd_i}$ is very straight forward. The formulas are given below and details are in \citet{meucci2007risk}. The covariance term is approximated by the sample covariance and $\odot$ represents element-wise multiplication.
\begin{align}
& Sd.fm_i = \sqrt{\bm\beta_i^{*'}\: cov(\mathbf{F^*})\: \bm\beta_i^*} \\
& \mathbf{mSd_i} = \frac{cov(\mathbf{F^*})\: \bm\beta_i^*}{Sd.fm_i} \\
& \mathbf{cSd_i} = \bm\beta_i^* \: \odot \: \mathbf{mSd_i}
\end{align}

\code{fmSdDecomp} performs this decomposition for all assets in the given factor model fit object as shown below. The total standard deviation and component, marginal and percentage component contributions for each asset are returned.

<<fig.cap="Percentage factor contribution to SD">>=
decomp <- fmSdDecomp(fit.sub)
names(decomp)
# get the factor model standard deviation for all assets
decomp$Sd.fm
# get the component contributions to Sd
decomp$cSd
# get the marginal factor contributions to Sd
decomp$mSd
# get the percentage component contributions to Sd
decomp$pcSd
# plot the percentage component contributions to Sd
plot(fit.sub, which=9, f.sub=1:3)
@
\newpage

\subsection{Value-at-Risk decomposition}

The VaR version of equation 6 is given below. By Euler's theorem, the value-at-risk of asset $i$'s return is:
\begin{equation}
VaR.fm_i = \sum_{k=1}^{K+1} cVaR_{i,k} = \sum_{k=1}^{K+1} \beta^*_{i,k} \: mVaR_{i,k}
\end{equation}

The marginal contribution to $VaR.fm$ is defined as the expectation of $F.star$, conditional on the loss being equal to $VaR.fm$. This is approximated as described in \citet{epperlein2006portfolio} using a triangular smoothing kernel. $VaR.fm$ is calculated as the sample quantile.

\code{fmVaRDecomp} performs this decomposition for all assets in the given factor model fit object as shown below.

<<fig.cap="Percentage factor contribution to VaR">>=
decomp1 <- fmVaRDecomp(fit.sub)
names(decomp1)
# get the factor model value-at-risk for all assets
decomp1$VaR.fm
# get the percentage component contributions to VaR
decomp1$pcVaR
# plot the percentage component contributions to VaR
plot(fit.sub, which=11, f.sub=1:3)
@

\subsection{Expected Shortfall decomposition}

The Expected Shortfall (ES) version of equation 6 is given below. By Euler's theorem, the expected shortfall of asset $i$'s return is:
\begin{equation}
ES.fm_i = \sum_{k=1}^{K+1} cES_{i,k} = \sum_{k=1}^{K+1} \beta^*_{i,k} \: mES_{i,k}
\end{equation}

The marginal contribution to $ES.fm$ is defined as the expectation of $F.star$, conditional on the loss being less than or equal to $VaR.fm$. This is estimated as a sample average of the observations in that data window. Once again, $VaR.fm$ is the sample quantile.

\code{fmEsDecomp} performs this decomposition for all assets in the given factor model fit object as shown below.
<<fig.cap="Percentage factor contribution to ES">>=
decomp2 <- fmEsDecomp(fit.sub, method="historical")
names(decomp2)
# get the factor model expected shortfall for all assets
decomp2$ES.fm
# get the component contributions to Sd
decomp2$cES
# get the marginal factor contributions to ES
decomp2$mES
# get the percentage component contributions to ES
decomp2$pcES
# plot the percentage component contributions to ES
plot(fit.sub, which=10, f.sub=1:3)
@

\newpage

\section{Plot}

Some types of individual asset (Figure 2) and group plots (Figures 1, 3-9) have already been demonstrated. Let's take a look at all available arguments for plotting a "ffm" object.
<<eval=FALSE>>=
## S3 method for class "ffm"
plot (x, which=NULL, f.sub=1:2, a.sub=1:6, plot.single=FALSE, asset.name,
      colorset=c("royalblue","dimgray","olivedrab","firebrick",
                 "goldenrod","mediumorchid","deepskyblue","chocolate",
                 "darkslategray"),
      legend.loc="topleft", las=1, lwd=2, maxlag=15, ...)
@

\subsection{Group plots}

This is the default option for plotting. Simply running \code{plot(fit)}, where \code{fit} is any "ffm" object, will bring up a menu (shown below) for group plots.
<<eval=FALSE, results='hide'>>=
plot(fit.sub)

# Make a plot selection (or 0 to exit):

#  1: Factor model coefficients: Alpha
#  2: Factor model coefficients: Betas
#  3: Actual and Fitted asset returns
#  4: R-squared
#  5: Residual Volatility
#  6: Scatterplot matrix of residuals, with histograms, density overlays,
#     correlations and significance stars
#  7: Factor Model Residual Correlation
#  8: Factor Model Return Correlation
#  9: Factor Contribution to SD
# 10: Factor Contribution to ES
# 11: Factor Contribution to VaR
# 12: Asset returns vs factor returns (single factor model)
#
# Selection:
@

Remarks:
\begin{itemize}
\item Only a subset of assets and factors selected by \code{a.sub} and \code{f.sub} are plotted. The first 2 factors and first 6 assets are shown by default.
\item The last option for plotting asset returns vs. factor returns (group plot option 12 and individual asset plot option 19) are only applicable for single factor models.
\end{itemize}

<<fig.cap="Actual and fitted factor model returns for the 1st 4 assets", fig.show='asis', fig.width=7, fig.height=6>>=
# Examples of group plots: looping disabled & no. of assets displayed = 4.
plot(fit.sub, which=3, a.sub=1:4, legend.loc=NULL, lwd=1)
@

<<fig.cap="Residual scatterplot matrix with histograms, density overlays, correlations and significance stars", warning=FALSE>>=
plot(fit.sub, which=6) # residual scatter plot matrix with correlations
@

\subsection{Menu and looping}

If the plot type argument \code{which} is not specified, a menu prompts for user input. In case multiple plots are needed, the menu is repeated after each plot (enter 0 to exit). User can also input a numeric vector of plot options via \code{which}.

\newpage
\subsection{Individual plots}

Setting \code{plot.single=TRUE} enables individual asset plots. If there is more than one asset fit by the fitted object \code{x}, \code{asset.name} is also necessary. In case the \code{ffm} object \code{x} contains only a single asset's fit, plot.ffm can infer \code{asset.name} without user input.

Here's the individual plot menu.
<<eval=FALSE, results='hide'>>=
plot(fit.sub, plot.single=TRUE, asset.name="HAM1")

# Make a plot selection (or 0 to exit):
#  1: Actual and fitted asset returns
#  2: Actual vs fitted asset returns
#  3: Residuals vs fitted asset returns
#  4: Sqrt. of modified residuals vs fitted
#  5: Residuals with standard error bands
#  6: Time series of squared residuals
#  7: Time series of absolute residuals
#  8: SACF and PACF of residuals
#  9: SACF and PACF of squared residuals
# 10: SACF and PACF of absolute residuals
# 11: Non-parametric density of residuals with normal overlaid
# 12: Non-parametric density of residuals with skew-t overlaid
# 13: Histogram of residuals with non-parametric density and normal overlaid
# 14: QQ-plot of residuals
# 15: CUSUM test-Recursive residuals
# 16: CUSUM test-LS residuals
# 17: Recursive estimates (RE) test of LS regression coefficients
# 18: Rolling regression over a 24-period observation window
# 19: Asset returns vs factor returns (single factor model)
#
# Selection:
@

Remarks:
\begin{itemize}
\item CUSUM plots (individual asset plot options 15, 16 and 17) are applicable only for \code{fit.method="LS"}.
\item Modified residuals, rolling regression and single factor model plots (individual asset plot options 4, 18 and 19) are not applicable for \code{variable.selection="lars"}.
\end{itemize}

Here are a few more examples which don't need interactive user input.
<<fig.cap="Time series plot of residuals with standard error bands: HAM1", fig.show='asis', fig.width=7, fig.height=4.5>>=
plot(fit.sub, plot.single=TRUE, asset.name="HAM1", which=5, ylim=c(-0.06,0.06))
@

<<fig.cap="SACF and PACF of absolute residuals: HAM1", fig.show='asis', fig.width=7, fig.height=4.5>>=
plot(fit.sub, plot.single=TRUE, asset.name="HAM1", which=10)
@

<<fig.cap="QQ-plot of residuals", fig.show='asis', fig.width=7, fig.height=4.5>>=
plot(fit.sub, plot.single=TRUE, asset.name="HAM1", which=14)
grid()
@

<<fig.cap="Non-parametric density of residuals with normal overlaid for HAM1", fig.show='asis', fig.width=7, fig.height=4.5>>=
plot(fit.sub, plot.single=TRUE, asset.name="HAM1", which=11)
@

<<fig.cap="Non-parametric density of residuals with skew-t overlaid for HAM1", fig.show='asis', fig.width=7, fig.height=4.5>>=
plot(fit.sub, plot.single=TRUE, asset.name="HAM1", which=12)
@
\newpage

\bibliography{FA}

\end{document}
